package ch.fortysix.maven.report.surefire

/**
 * 
 */

import java.io.File;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Set;
import java.util.List;

import org.apache.maven.doxia.siterenderer.Renderer;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.project.MavenProject;
import org.apache.maven.reporting.MavenReportException;

import ch.fortysix.maven.report.AbstractReportMojo;
import ch.fortysix.maven.report.support.SinkReporter;


/**
 * Sends mails based on surefire (test) results.
 * 
 * @author Domi
 * @goal surefire-mail
 * @phase site
 */
class PostmanSurefireReportMojo extends AbstractReportMojo {
	
	/**
	 * The postfix used in the email subject 
	 * @parameter default-value="surfire test notification"
	 */
	String subjectPostFix
	
	String getSubjectPostFix(){
		return subjectPostFix
	}
	
	String getNlsPrefix(){
		"report.postman.surefire."
	}
	
	public String getOutputName() {
		"postman-surefire-report"
	}	
	
	/**
	 * Who should receive a mail? One can use an id of a developer registered in the pom or an email address directly.
	 * <pre>
	 * 	 		&lt;receivers&gt;	 
	 * 		  		&lt;receiver&gt;developerId&lt;/receiver&gt;
	 * 		  		&lt;receiver&gt;sam@topland.com&lt;/receiver&gt;
	 * 	 		&lt;/receivers&gt;
	 * </pre>
	 * @parameter 
	 * @required
	 */	
	Set receivers;	
	
	/**
	 * The file pattern to be used to search for the surefire reports in the 'testReportsDirectory'-directory.
	 * 
	 * @parameter default-value="TEST-.*.xml"
	 */	
	String reportFilePattern
	
	/**
	 * This allows to redefine the condition to send the mail. e.g. one can define that there 
	 * must not be more then 20 skipped test cases (<code>skipped > 20</code>).
	 * The default condition sends mails if there are any errors.
	 * The following variables are available for usage in the condition:
	 * <ul>
	 * 	<li><code>errors</code>: number of all errors while running surefire</li>
	 * 	<li><code>skipped</code>: number of all skipped test cases</li>
	 * 	<li><code>failures</code>: number of all failures in the test cases</li>
	 * 	<li><code>total</code>: number of all test cases</li>
	 * </ul>
	 * Other (usefull or not...) examples:
	 * <ul>
	 * 	<li><code>errors > 0</code> : sends a mail only if there are errors</li>
	 * 	<li><code>skipped > failures</code> : sends mails if there are more skipped then failed test cases</li>
	 * 	<li><code>total == skipped</code> : Sends mails if all tests are skipped</li>
	 * </ul>
	 * To avoid problems with XML syntax, one can use a <a href="http://www.w3schools.com/xmL/xml_cdata.asp">CDATA element</a>.
	 * The default only send a mail if there are errors or failures, but ignores the skipped ones.
	 * @parameter default-value="errors > 0 || failures > 0"
	 */
	String groovyCondition
	
	/**
	 * Base directory where all surefire test reports are read from.  
	 * @parameter expression="${project.build.directory}/surefire-reports" default-value="${project.build.directory}/surefire-reports"
	 */	
	File testReportsDirectory	
	
	/**
	 * The generated surefire html report (previously generated by 'maven-surefire-report-plugin'). 
	 * @parameter default-value="${project.build.directory}/site/surefire-report.html"
	 */
	File surefireReportHtml;
	
	
	protected boolean prepareReport(Locale locale){
		if(!testReportsDirectory || !testReportsDirectory.exists()){
			getLog().warn """
				'testReportsDirectory' could not be found ($testReportsDirectory).
				Do you have the 'maven-surefire-plugin' configured or are the reports generated to a different directory?
				"""
			return false
		}
		if(surefireReportHtml && !surefireReportHtml.exists()){
			getLog().warn """
			The postman-surefire mails will not contain HTML, because the surefire report could not be found.
			- 'maven-surefire-report-plugin' must be defined before 'maven-postman-plugin' in the pom!
			"""
		}
		return true
	}
	
	/**
	 * create the report
	 */
	protected void executePostmanReport(Locale locale, List mailList) throws MavenReportException {
		
		def mailContent
		// as all mails do have the same content, we just take the content of the first to compute test results
		if(mailList){
			mailContent = mailList[0]
		}
		
		////////////////////////////////////////////////////
		//
		// evaluate if the condition tells us to send the mails
		
		// - prepare variables
		def errors = mailContent?.suiteReports.inject(0) { count, suiteReport ->
			count + suiteReport?.errors
		}
		log.debug "test ERRORS: "+ errors
		def skipped = mailContent?.suiteReports.inject(0) { count, suiteReport ->
			count + suiteReport?.skipped
		}
		log.debug "test SKIPPED: "+ skipped
		def failures = mailContent?.suiteReports.inject(0) { count, suiteReport ->
			count + suiteReport?.failures
		}
		log.debug "test FAILURES: "+ failures
		def tests = mailContent?.suiteReports.inject(0) { count, suiteReport ->
			count + suiteReport?.tests
		}
		log.debug "test TOTAL: "+ tests
		
		// - bind the variables
		Binding binding = new Binding();
		binding.setVariable("errors", errors);
		binding.setVariable("skipped", skipped);
		binding.setVariable("failures", failures);
		binding.setVariable("total", tests);
		
		// - evaluate
		log.info "evaluating groovy condition [$groovyCondition]"
		GroovyShell shell = new GroovyShell(binding);
		def value 
		try{
			value = shell.evaluate(groovyCondition);
		}catch (Exception e){
			throw new MojoExecutionException("postman is not able to evaluate the configured 'groovyCondition': $groovyCondition", e)
		}
		boolean sendIt = value as Boolean
		
		if(skipMails){
			log.info "postman skips sending mails!"
		} else {
			// we send the same report to all receivers
			if(sendIt){
				context.run mailList
			}else{
				log.info "postman surfire report groovy condition [$groovyCondition] not fulfilled, don't send the mails..."
			}
		}
		
		def report = new SinkReporter(bodyGenerator: new SurefireReportBodyGenerator(mailsSkiped: skipMails, mailList: mailList))
		report.doGenerateReport( getBundle( locale ), getSink(), nlsPrefix, getLog())
	}
	
	
	/**
	 * collect the mails to be send/reported
	 */
	public List collectMails(){
		SurefireMailCollector testReportSender = new SurefireMailCollector(log: getLog(), reportFilePattern: reportFilePattern, surefireReportHtml: surefireReportHtml)
		def mailContent = testReportSender.getSingleMail(testReportsDirectory)
		
		return [[receivers: receivers, from: from, subject: subject, text: mailContent.text(), html: mailContent.html(), suiteReports: mailContent.suiteReports]]
	}
	
}
